{"ast":null,"code":"var _jsxFileName = \"/Users/luke/Library/CloudStorage/Dropbox/code/fly-snake/src/AISnakeGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_SIZE = 15;\nconst CELL_SIZE = 20;\nconst INITIAL_SNAKE = [{\n  x: 7,\n  y: 7\n}];\nconst INITIAL_DIRECTION = {\n  x: 1,\n  y: 0\n};\nconst INITIAL_FOOD = {\n  x: 5,\n  y: 5\n};\nconst AISnakeGame = () => {\n  _s();\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\n  const [direction, setDirection] = useState(INITIAL_DIRECTION);\n  const [food, setFood] = useState(INITIAL_FOOD);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const getNeighbors = (node, snake) => {\n    const neighbors = [{\n      x: node.x - 1,\n      y: node.y\n    }, {\n      x: node.x + 1,\n      y: node.y\n    }, {\n      x: node.x,\n      y: node.y - 1\n    }, {\n      x: node.x,\n      y: node.y + 1\n    }];\n    return neighbors.filter(n => n.x >= 0 && n.x < GRID_SIZE && n.y >= 0 && n.y < GRID_SIZE && !snake.some(s => s.x === n.x && s.y === n.y));\n  };\n  const hamiltonianCycle = useCallback(() => {\n    const cycle = [];\n    for (let i = 0; i < GRID_SIZE; i++) {\n      for (let j = 0; j < GRID_SIZE; j++) {\n        cycle.push({\n          x: j,\n          y: i\n        });\n      }\n      if (i % 2 === 0 && i < GRID_SIZE - 1) {\n        cycle.push({\n          x: GRID_SIZE - 1,\n          y: i + 1\n        });\n      } else if (i % 2 === 1 && i < GRID_SIZE - 1) {\n        cycle.push({\n          x: 0,\n          y: i + 1\n        });\n      }\n    }\n    return cycle;\n  }, []);\n  const findPath = (start, goal, snake) => {\n    const queue = [[start]];\n    const visited = new Set();\n    while (queue.length > 0) {\n      const path = queue.shift();\n      const pos = path[path.length - 1];\n      const key = `${pos.x},${pos.y}`;\n      if (pos.x === goal.x && pos.y === goal.y) {\n        return path;\n      }\n      if (!visited.has(key)) {\n        visited.add(key);\n        const neighbors = getNeighbors(pos, snake);\n        for (const neighbor of neighbors) {\n          queue.push([...path, neighbor]);\n        }\n      }\n    }\n    return null;\n  };\n  const moveSnake = useCallback(() => {\n    if (gameOver) return;\n    const head = snake[0];\n    const cycle = hamiltonianCycle();\n    let nextMove;\n\n    // Try to find a path to the food\n    const pathToFood = findPath(head, food, snake);\n    if (pathToFood && pathToFood.length > 1) {\n      // If a path to food exists and it's safe, move towards the food\n      nextMove = pathToFood[1];\n    } else {\n      // If no safe path to food, follow the Hamiltonian cycle\n      const headIndex = cycle.findIndex(p => p.x === head.x && p.y === head.y);\n      nextMove = cycle[(headIndex + 1) % cycle.length];\n    }\n    const newDirection = {\n      x: nextMove.x - head.x,\n      y: nextMove.y - head.y\n    };\n    const newSnake = [{\n      x: head.x + newDirection.x,\n      y: head.y + newDirection.y\n    }, ...snake];\n    if (newSnake[0].x === food.x && newSnake[0].y === food.y) {\n      setScore(prevScore => prevScore + 1);\n      setFood(getRandomFood(newSnake));\n    } else {\n      newSnake.pop();\n    }\n    setSnake(newSnake);\n    setDirection(newDirection);\n\n    // Check for game over conditions\n    const newHead = newSnake[0];\n    if (newHead.x < 0 || newHead.x >= GRID_SIZE || newHead.y < 0 || newHead.y >= GRID_SIZE || newSnake.slice(1).some(segment => segment.x === newHead.x && segment.y === newHead.y)) {\n      setGameOver(true);\n    }\n  }, [snake, food, gameOver, hamiltonianCycle]);\n  useEffect(() => {\n    const gameLoop = setInterval(moveSnake, 100);\n    return () => clearInterval(gameLoop);\n  }, [moveSnake]);\n  const getRandomFood = snake => {\n    let newFood;\n    do {\n      newFood = {\n        x: Math.floor(Math.random() * GRID_SIZE),\n        y: Math.floor(Math.random() * GRID_SIZE)\n      };\n    } while (snake.some(segment => segment.x === newFood.x && segment.y === newFood.y));\n    return newFood;\n  };\n  const resetGame = () => {\n    setSnake(INITIAL_SNAKE);\n    setDirection(INITIAL_DIRECTION);\n    setFood(INITIAL_FOOD);\n    setGameOver(false);\n    setScore(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '100vh',\n      backgroundColor: '#f0f0f0',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        fontSize: '24px',\n        fontWeight: 'bold',\n        marginBottom: '20px'\n      },\n      children: \"AI Snake Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: `${GRID_SIZE * CELL_SIZE}px`,\n        height: `${GRID_SIZE * CELL_SIZE}px`,\n        display: 'grid',\n        gridTemplateColumns: `repeat(${GRID_SIZE}, 1fr)`,\n        gridTemplateRows: `repeat(${GRID_SIZE}, 1fr)`,\n        border: '4px solid #333',\n        backgroundColor: 'white'\n      },\n      children: Array.from({\n        length: GRID_SIZE * GRID_SIZE\n      }).map((_, index) => {\n        const x = index % GRID_SIZE;\n        const y = Math.floor(index / GRID_SIZE);\n        const isSnake = snake.some(segment => segment.x === x && segment.y === y);\n        const isFood = food.x === x && food.y === y;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: `${CELL_SIZE}px`,\n            height: `${CELL_SIZE}px`,\n            border: '1px solid #eee',\n            backgroundColor: isSnake ? 'green' : isFood ? 'red' : 'white'\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        fontSize: '18px'\n      },\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: '18px',\n          fontWeight: 'bold',\n          color: 'red'\n        },\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          marginTop: '10px',\n          padding: '10px 20px',\n          backgroundColor: 'blue',\n          color: 'white',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer'\n        },\n        onClick: resetGame,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        fontSize: '14px',\n        color: '#666'\n      },\n      children: \"AI is controlling the snake\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(AISnakeGame, \"fA3qB+bZNShvPNsjsr/wP1U0Pt8=\");\n_c = AISnakeGame;\nexport default AISnakeGame;\nvar _c;\n$RefreshReg$(_c, \"AISnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","GRID_SIZE","CELL_SIZE","INITIAL_SNAKE","x","y","INITIAL_DIRECTION","INITIAL_FOOD","AISnakeGame","_s","snake","setSnake","direction","setDirection","food","setFood","gameOver","setGameOver","score","setScore","getNeighbors","node","neighbors","filter","n","some","s","hamiltonianCycle","cycle","i","j","push","findPath","start","goal","queue","visited","Set","length","path","shift","pos","key","has","add","neighbor","moveSnake","head","nextMove","pathToFood","headIndex","findIndex","p","newDirection","newSnake","prevScore","getRandomFood","pop","newHead","slice","segment","gameLoop","setInterval","clearInterval","newFood","Math","floor","random","resetGame","style","display","flexDirection","alignItems","justifyContent","minHeight","backgroundColor","padding","children","fontSize","fontWeight","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","width","height","gridTemplateColumns","gridTemplateRows","border","Array","from","map","_","index","isSnake","isFood","marginTop","textAlign","color","borderRadius","cursor","onClick","_c","$RefreshReg$"],"sources":["/Users/luke/Library/CloudStorage/Dropbox/code/fly-snake/src/AISnakeGame.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nconst GRID_SIZE = 15;\nconst CELL_SIZE = 20;\nconst INITIAL_SNAKE = [{ x: 7, y: 7 }];\nconst INITIAL_DIRECTION = { x: 1, y: 0 };\nconst INITIAL_FOOD = { x: 5, y: 5 };\n\nconst AISnakeGame = () => {\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\n  const [direction, setDirection] = useState(INITIAL_DIRECTION);\n  const [food, setFood] = useState(INITIAL_FOOD);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n\n  const getNeighbors = (node, snake) => {\n    const neighbors = [\n      { x: node.x - 1, y: node.y },\n      { x: node.x + 1, y: node.y },\n      { x: node.x, y: node.y - 1 },\n      { x: node.x, y: node.y + 1 },\n    ];\n    return neighbors.filter(\n      (n) =>\n        n.x >= 0 &&\n        n.x < GRID_SIZE &&\n        n.y >= 0 &&\n        n.y < GRID_SIZE &&\n        !snake.some((s) => s.x === n.x && s.y === n.y)\n    );\n  };\n\n  const hamiltonianCycle = useCallback(() => {\n    const cycle = [];\n    for (let i = 0; i < GRID_SIZE; i++) {\n      for (let j = 0; j < GRID_SIZE; j++) {\n        cycle.push({ x: j, y: i });\n      }\n      if (i % 2 === 0 && i < GRID_SIZE - 1) {\n        cycle.push({ x: GRID_SIZE - 1, y: i + 1 });\n      } else if (i % 2 === 1 && i < GRID_SIZE - 1) {\n        cycle.push({ x: 0, y: i + 1 });\n      }\n    }\n    return cycle;\n  }, []);\n\n  const findPath = (start, goal, snake) => {\n    const queue = [[start]];\n    const visited = new Set();\n\n    while (queue.length > 0) {\n      const path = queue.shift();\n      const pos = path[path.length - 1];\n      const key = `${pos.x},${pos.y}`;\n\n      if (pos.x === goal.x && pos.y === goal.y) {\n        return path;\n      }\n\n      if (!visited.has(key)) {\n        visited.add(key);\n        const neighbors = getNeighbors(pos, snake);\n        for (const neighbor of neighbors) {\n          queue.push([...path, neighbor]);\n        }\n      }\n    }\n\n    return null;\n  };\n\n  const moveSnake = useCallback(() => {\n    if (gameOver) return;\n\n    const head = snake[0];\n    const cycle = hamiltonianCycle();\n    let nextMove;\n\n    // Try to find a path to the food\n    const pathToFood = findPath(head, food, snake);\n\n    if (pathToFood && pathToFood.length > 1) {\n      // If a path to food exists and it's safe, move towards the food\n      nextMove = pathToFood[1];\n    } else {\n      // If no safe path to food, follow the Hamiltonian cycle\n      const headIndex = cycle.findIndex(p => p.x === head.x && p.y === head.y);\n      nextMove = cycle[(headIndex + 1) % cycle.length];\n    }\n\n    const newDirection = {\n      x: nextMove.x - head.x,\n      y: nextMove.y - head.y,\n    };\n\n    const newSnake = [{ x: head.x + newDirection.x, y: head.y + newDirection.y }, ...snake];\n\n    if (newSnake[0].x === food.x && newSnake[0].y === food.y) {\n      setScore(prevScore => prevScore + 1);\n      setFood(getRandomFood(newSnake));\n    } else {\n      newSnake.pop();\n    }\n\n    setSnake(newSnake);\n    setDirection(newDirection);\n\n    // Check for game over conditions\n    const newHead = newSnake[0];\n    if (\n      newHead.x < 0 || newHead.x >= GRID_SIZE || newHead.y < 0 || newHead.y >= GRID_SIZE ||\n      newSnake.slice(1).some(segment => segment.x === newHead.x && segment.y === newHead.y)\n    ) {\n      setGameOver(true);\n    }\n  }, [snake, food, gameOver, hamiltonianCycle]);\n\n  useEffect(() => {\n    const gameLoop = setInterval(moveSnake, 100);\n    return () => clearInterval(gameLoop);\n  }, [moveSnake]);\n\n  const getRandomFood = (snake) => {\n    let newFood;\n    do {\n      newFood = {\n        x: Math.floor(Math.random() * GRID_SIZE),\n        y: Math.floor(Math.random() * GRID_SIZE),\n      };\n    } while (snake.some((segment) => segment.x === newFood.x && segment.y === newFood.y));\n    return newFood;\n  };\n\n  const resetGame = () => {\n    setSnake(INITIAL_SNAKE);\n    setDirection(INITIAL_DIRECTION);\n    setFood(INITIAL_FOOD);\n    setGameOver(false);\n    setScore(0);\n  };\n\n  return (\n    <div style={{\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '100vh',\n      backgroundColor: '#f0f0f0',\n      padding: '20px'\n    }}>\n      <h1 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '20px' }}>AI Snake Game</h1>\n      <div style={{\n        width: `${GRID_SIZE * CELL_SIZE}px`,\n        height: `${GRID_SIZE * CELL_SIZE}px`,\n        display: 'grid',\n        gridTemplateColumns: `repeat(${GRID_SIZE}, 1fr)`,\n        gridTemplateRows: `repeat(${GRID_SIZE}, 1fr)`,\n        border: '4px solid #333',\n        backgroundColor: 'white'\n      }}>\n        {Array.from({ length: GRID_SIZE * GRID_SIZE }).map((_, index) => {\n          const x = index % GRID_SIZE;\n          const y = Math.floor(index / GRID_SIZE);\n          const isSnake = snake.some(segment => segment.x === x && segment.y === y);\n          const isFood = food.x === x && food.y === y;\n          return (\n            <div\n              key={index}\n              style={{\n                width: `${CELL_SIZE}px`,\n                height: `${CELL_SIZE}px`,\n                border: '1px solid #eee',\n                backgroundColor: isSnake ? 'green' : isFood ? 'red' : 'white'\n              }}\n            />\n          );\n        })}\n      </div>\n      <div style={{ marginTop: '20px', fontSize: '18px' }}>Score: {score}</div>\n      {gameOver && (\n        <div style={{ marginTop: '20px', textAlign: 'center' }}>\n          <p style={{ fontSize: '18px', fontWeight: 'bold', color: 'red' }}>Game Over!</p>\n          <button\n            style={{\n              marginTop: '10px',\n              padding: '10px 20px',\n              backgroundColor: 'blue',\n              color: 'white',\n              border: 'none',\n              borderRadius: '5px',\n              cursor: 'pointer'\n            }}\n            onClick={resetGame}\n          >\n            Play Again\n          </button>\n        </div>\n      )}\n      <div style={{ marginTop: '20px', fontSize: '14px', color: '#666' }}>\n        AI is controlling the snake\n      </div>\n    </div>\n  );\n};\n\nexport default AISnakeGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}