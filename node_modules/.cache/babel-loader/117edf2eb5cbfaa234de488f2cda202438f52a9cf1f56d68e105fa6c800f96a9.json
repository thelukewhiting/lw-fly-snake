{"ast":null,"code":"var _jsxFileName = \"/Users/luke/Library/CloudStorage/Dropbox/code/fly-snake/src/AISnakeGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_SIZE = 15;\nconst CELL_SIZE = 20;\nconst INITIAL_SNAKE = [{\n  x: 7,\n  y: 7\n}];\nconst INITIAL_DIRECTION = {\n  x: 1,\n  y: 0\n};\nconst INITIAL_FOOD = {\n  x: 5,\n  y: 5\n};\nconst manhattanDistance = (a, b) => Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\nconst AISnakeGame = () => {\n  _s();\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\n  const [direction, setDirection] = useState(INITIAL_DIRECTION);\n  const [food, setFood] = useState(INITIAL_FOOD);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const getNeighbors = node => {\n    const neighbors = [{\n      x: node.x - 1,\n      y: node.y\n    }, {\n      x: node.x + 1,\n      y: node.y\n    }, {\n      x: node.x,\n      y: node.y - 1\n    }, {\n      x: node.x,\n      y: node.y + 1\n    }];\n    return neighbors.filter(n => n.x >= 0 && n.x < GRID_SIZE && n.y >= 0 && n.y < GRID_SIZE && !snake.some(s => s.x === n.x && s.y === n.y));\n  };\n  const findPath = (start, goal) => {\n    const openSet = [start];\n    const cameFrom = {};\n    const gScore = {\n      [`${start.x},${start.y}`]: 0\n    };\n    const fScore = {\n      [`${start.x},${start.y}`]: manhattanDistance(start, goal)\n    };\n    while (openSet.length > 0) {\n      const current = openSet.reduce((a, b) => fScore[`${a.x},${a.y}`] < fScore[`${b.x},${b.y}`] ? a : b);\n      if (current.x === goal.x && current.y === goal.y) {\n        const path = [current];\n        let temp = current;\n        while (cameFrom[`${temp.x},${temp.y}`]) {\n          temp = cameFrom[`${temp.x},${temp.y}`];\n          path.unshift(temp);\n        }\n        return path;\n      }\n      openSet.splice(openSet.indexOf(current), 1);\n      const neighbors = getNeighbors(current);\n      for (const neighbor of neighbors) {\n        const tentativeGScore = gScore[`${current.x},${current.y}`] + 1;\n        if (tentativeGScore < (gScore[`${neighbor.x},${neighbor.y}`] || Infinity)) {\n          cameFrom[`${neighbor.x},${neighbor.y}`] = current;\n          gScore[`${neighbor.x},${neighbor.y}`] = tentativeGScore;\n          fScore[`${neighbor.x},${neighbor.y}`] = gScore[`${neighbor.x},${neighbor.y}`] + manhattanDistance(neighbor, goal);\n          if (!openSet.some(n => n.x === neighbor.x && n.y === neighbor.y)) {\n            openSet.push(neighbor);\n          }\n        }\n      }\n    }\n    return null; // No path found\n  };\n  const moveSnake = useCallback(() => {\n    if (gameOver) return;\n    const head = snake[0];\n    const path = findPath(head, food);\n    if (path && path.length > 1) {\n      const nextMove = path[1];\n      const newDirection = {\n        x: nextMove.x - head.x,\n        y: nextMove.y - head.y\n      };\n      setDirection(newDirection);\n    }\n    const newSnake = [...snake];\n    const newHead = {\n      x: head.x + direction.x,\n      y: head.y + direction.y\n    };\n    if (newHead.x < 0 || newHead.x >= GRID_SIZE || newHead.y < 0 || newHead.y >= GRID_SIZE) {\n      setGameOver(true);\n      return;\n    }\n    if (snake.some(segment => segment.x === newHead.x && segment.y === newHead.y)) {\n      setGameOver(true);\n      return;\n    }\n    newSnake.unshift(newHead);\n    if (newHead.x === food.x && newHead.y === food.y) {\n      setScore(prevScore => prevScore + 1);\n      setFood(getRandomFood(newSnake));\n    } else {\n      newSnake.pop();\n    }\n    setSnake(newSnake);\n  }, [snake, direction, food, gameOver]);\n  useEffect(() => {\n    const gameLoop = setInterval(moveSnake, 100);\n    return () => clearInterval(gameLoop);\n  }, [moveSnake]);\n  const getRandomFood = snake => {\n    let newFood;\n    do {\n      newFood = {\n        x: Math.floor(Math.random() * GRID_SIZE),\n        y: Math.floor(Math.random() * GRID_SIZE)\n      };\n    } while (snake.some(segment => segment.x === newFood.x && segment.y === newFood.y));\n    return newFood;\n  };\n  const resetGame = () => {\n    setSnake(INITIAL_SNAKE);\n    setDirection(INITIAL_DIRECTION);\n    setFood(INITIAL_FOOD);\n    setGameOver(false);\n    setScore(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '100vh',\n      backgroundColor: '#f0f0f0',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        fontSize: '24px',\n        fontWeight: 'bold',\n        marginBottom: '20px'\n      },\n      children: \"AI Snake Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: `${GRID_SIZE * CELL_SIZE}px`,\n        height: `${GRID_SIZE * CELL_SIZE}px`,\n        display: 'grid',\n        gridTemplateColumns: `repeat(${GRID_SIZE}, 1fr)`,\n        gridTemplateRows: `repeat(${GRID_SIZE}, 1fr)`,\n        border: '4px solid #333',\n        backgroundColor: 'white'\n      },\n      children: Array.from({\n        length: GRID_SIZE * GRID_SIZE\n      }).map((_, index) => {\n        const x = index % GRID_SIZE;\n        const y = Math.floor(index / GRID_SIZE);\n        const isSnake = snake.some(segment => segment.x === x && segment.y === y);\n        const isFood = food.x === x && food.y === y;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: `${CELL_SIZE}px`,\n            height: `${CELL_SIZE}px`,\n            border: '1px solid #eee',\n            backgroundColor: isSnake ? 'green' : isFood ? 'red' : 'white'\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        fontSize: '18px'\n      },\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: '18px',\n          fontWeight: 'bold',\n          color: 'red'\n        },\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          marginTop: '10px',\n          padding: '10px 20px',\n          backgroundColor: 'blue',\n          color: 'white',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer'\n        },\n        onClick: resetGame,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        fontSize: '14px',\n        color: '#666'\n      },\n      children: \"AI is controlling the snake\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(AISnakeGame, \"IcYzDjpeH45naIe7CNNE8aT8B6Q=\");\n_c = AISnakeGame;\nexport default AISnakeGame;\nvar _c;\n$RefreshReg$(_c, \"AISnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","GRID_SIZE","CELL_SIZE","INITIAL_SNAKE","x","y","INITIAL_DIRECTION","INITIAL_FOOD","manhattanDistance","a","b","Math","abs","AISnakeGame","_s","snake","setSnake","direction","setDirection","food","setFood","gameOver","setGameOver","score","setScore","getNeighbors","node","neighbors","filter","n","some","s","findPath","start","goal","openSet","cameFrom","gScore","fScore","length","current","reduce","path","temp","unshift","splice","indexOf","neighbor","tentativeGScore","Infinity","push","moveSnake","head","nextMove","newDirection","newSnake","newHead","segment","prevScore","getRandomFood","pop","gameLoop","setInterval","clearInterval","newFood","floor","random","resetGame","style","display","flexDirection","alignItems","justifyContent","minHeight","backgroundColor","padding","children","fontSize","fontWeight","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","width","height","gridTemplateColumns","gridTemplateRows","border","Array","from","map","_","index","isSnake","isFood","marginTop","textAlign","color","borderRadius","cursor","onClick","_c","$RefreshReg$"],"sources":["/Users/luke/Library/CloudStorage/Dropbox/code/fly-snake/src/AISnakeGame.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nconst GRID_SIZE = 15;\nconst CELL_SIZE = 20;\nconst INITIAL_SNAKE = [{ x: 7, y: 7 }];\nconst INITIAL_DIRECTION = { x: 1, y: 0 };\nconst INITIAL_FOOD = { x: 5, y: 5 };\n\nconst manhattanDistance = (a, b) => Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n\nconst AISnakeGame = () => {\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\n  const [direction, setDirection] = useState(INITIAL_DIRECTION);\n  const [food, setFood] = useState(INITIAL_FOOD);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n\n  const getNeighbors = (node) => {\n    const neighbors = [\n      { x: node.x - 1, y: node.y },\n      { x: node.x + 1, y: node.y },\n      { x: node.x, y: node.y - 1 },\n      { x: node.x, y: node.y + 1 },\n    ];\n    return neighbors.filter(\n      (n) =>\n        n.x >= 0 &&\n        n.x < GRID_SIZE &&\n        n.y >= 0 &&\n        n.y < GRID_SIZE &&\n        !snake.some((s) => s.x === n.x && s.y === n.y)\n    );\n  };\n\n  const findPath = (start, goal) => {\n    const openSet = [start];\n    const cameFrom = {};\n    const gScore = { [`${start.x},${start.y}`]: 0 };\n    const fScore = { [`${start.x},${start.y}`]: manhattanDistance(start, goal) };\n\n    while (openSet.length > 0) {\n      const current = openSet.reduce((a, b) =>\n        fScore[`${a.x},${a.y}`] < fScore[`${b.x},${b.y}`] ? a : b\n      );\n\n      if (current.x === goal.x && current.y === goal.y) {\n        const path = [current];\n        let temp = current;\n        while (cameFrom[`${temp.x},${temp.y}`]) {\n          temp = cameFrom[`${temp.x},${temp.y}`];\n          path.unshift(temp);\n        }\n        return path;\n      }\n\n      openSet.splice(openSet.indexOf(current), 1);\n      const neighbors = getNeighbors(current);\n\n      for (const neighbor of neighbors) {\n        const tentativeGScore =\n          gScore[`${current.x},${current.y}`] + 1;\n\n        if (\n          tentativeGScore <\n          (gScore[`${neighbor.x},${neighbor.y}`] || Infinity)\n        ) {\n          cameFrom[`${neighbor.x},${neighbor.y}`] = current;\n          gScore[`${neighbor.x},${neighbor.y}`] = tentativeGScore;\n          fScore[`${neighbor.x},${neighbor.y}`] =\n            gScore[`${neighbor.x},${neighbor.y}`] +\n            manhattanDistance(neighbor, goal);\n\n          if (!openSet.some((n) => n.x === neighbor.x && n.y === neighbor.y)) {\n            openSet.push(neighbor);\n          }\n        }\n      }\n    }\n\n    return null; // No path found\n  };\n\n  const moveSnake = useCallback(() => {\n    if (gameOver) return;\n\n    const head = snake[0];\n    const path = findPath(head, food);\n\n    if (path && path.length > 1) {\n      const nextMove = path[1];\n      const newDirection = {\n        x: nextMove.x - head.x,\n        y: nextMove.y - head.y,\n      };\n      setDirection(newDirection);\n    }\n\n    const newSnake = [...snake];\n    const newHead = {\n      x: head.x + direction.x,\n      y: head.y + direction.y,\n    };\n\n    if (\n      newHead.x < 0 ||\n      newHead.x >= GRID_SIZE ||\n      newHead.y < 0 ||\n      newHead.y >= GRID_SIZE\n    ) {\n      setGameOver(true);\n      return;\n    }\n\n    if (snake.some((segment) => segment.x === newHead.x && segment.y === newHead.y)) {\n      setGameOver(true);\n      return;\n    }\n\n    newSnake.unshift(newHead);\n\n    if (newHead.x === food.x && newHead.y === food.y) {\n      setScore((prevScore) => prevScore + 1);\n      setFood(getRandomFood(newSnake));\n    } else {\n      newSnake.pop();\n    }\n\n    setSnake(newSnake);\n  }, [snake, direction, food, gameOver]);\n\n  useEffect(() => {\n    const gameLoop = setInterval(moveSnake, 100);\n    return () => clearInterval(gameLoop);\n  }, [moveSnake]);\n\n  const getRandomFood = (snake) => {\n    let newFood;\n    do {\n      newFood = {\n        x: Math.floor(Math.random() * GRID_SIZE),\n        y: Math.floor(Math.random() * GRID_SIZE),\n      };\n    } while (snake.some((segment) => segment.x === newFood.x && segment.y === newFood.y));\n    return newFood;\n  };\n\n  const resetGame = () => {\n    setSnake(INITIAL_SNAKE);\n    setDirection(INITIAL_DIRECTION);\n    setFood(INITIAL_FOOD);\n    setGameOver(false);\n    setScore(0);\n  };\n\n  return (\n    <div style={{\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '100vh',\n      backgroundColor: '#f0f0f0',\n      padding: '20px'\n    }}>\n      <h1 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '20px' }}>AI Snake Game</h1>\n      <div style={{\n        width: `${GRID_SIZE * CELL_SIZE}px`,\n        height: `${GRID_SIZE * CELL_SIZE}px`,\n        display: 'grid',\n        gridTemplateColumns: `repeat(${GRID_SIZE}, 1fr)`,\n        gridTemplateRows: `repeat(${GRID_SIZE}, 1fr)`,\n        border: '4px solid #333',\n        backgroundColor: 'white'\n      }}>\n        {Array.from({ length: GRID_SIZE * GRID_SIZE }).map((_, index) => {\n          const x = index % GRID_SIZE;\n          const y = Math.floor(index / GRID_SIZE);\n          const isSnake = snake.some(segment => segment.x === x && segment.y === y);\n          const isFood = food.x === x && food.y === y;\n          return (\n            <div\n              key={index}\n              style={{\n                width: `${CELL_SIZE}px`,\n                height: `${CELL_SIZE}px`,\n                border: '1px solid #eee',\n                backgroundColor: isSnake ? 'green' : isFood ? 'red' : 'white'\n              }}\n            />\n          );\n        })}\n      </div>\n      <div style={{ marginTop: '20px', fontSize: '18px' }}>Score: {score}</div>\n      {gameOver && (\n        <div style={{ marginTop: '20px', textAlign: 'center' }}>\n          <p style={{ fontSize: '18px', fontWeight: 'bold', color: 'red' }}>Game Over!</p>\n          <button\n            style={{\n              marginTop: '10px',\n              padding: '10px 20px',\n              backgroundColor: 'blue',\n              color: 'white',\n              border: 'none',\n              borderRadius: '5px',\n              cursor: 'pointer'\n            }}\n            onClick={resetGame}\n          >\n            Play Again\n          </button>\n        </div>\n      )}\n      <div style={{ marginTop: '20px', fontSize: '14px', color: '#666' }}>\n        AI is controlling the snake\n      </div>\n    </div>\n  );\n};\n\nexport default AISnakeGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}