{"ast":null,"code":"var _jsxFileName = \"/Users/luke/Library/CloudStorage/Dropbox/code/fly-snake/src/AISnakeGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_SIZE = 20;\nconst CELL_SIZE = 30;\nconst GAME_SIZE = GRID_SIZE * CELL_SIZE;\nconst INITIAL_SNAKE = [{\n  x: 10,\n  y: 10\n}, {\n  x: 9,\n  y: 10\n}];\nconst INITIAL_DIRECTION = {\n  x: 1,\n  y: 0\n};\nconst INITIAL_FOOD = {\n  x: 15,\n  y: 15\n};\nconst SPEED = 100;\nconst UltimateAISnakeGame = () => {\n  _s();\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\n  const [direction, setDirection] = useState(INITIAL_DIRECTION);\n  const [food, setFood] = useState(INITIAL_FOOD);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [error, setError] = useState(null);\n  const svgRef = useRef(null);\n  const getNeighbors = useCallback((node, currentSnake) => {\n    try {\n      const neighbors = [{\n        x: node.x - 1,\n        y: node.y\n      }, {\n        x: node.x + 1,\n        y: node.y\n      }, {\n        x: node.x,\n        y: node.y - 1\n      }, {\n        x: node.x,\n        y: node.y + 1\n      }];\n      return neighbors.filter(n => n.x >= 0 && n.x < GRID_SIZE && n.y >= 0 && n.y < GRID_SIZE && !currentSnake.some(s => s.x === n.x && s.y === n.y));\n    } catch (err) {\n      console.error('Error in getNeighbors:', err);\n      setError(err.message);\n      return [];\n    }\n  }, []);\n  const findPath = useCallback((start, goal, currentSnake) => {\n    try {\n      const queue = [[start]];\n      const visited = new Set();\n      while (queue.length > 0) {\n        const path = queue.shift();\n        const pos = path[path.length - 1];\n        const key = `${pos.x},${pos.y}`;\n        if (pos.x === goal.x && pos.y === goal.y) {\n          return path;\n        }\n        if (!visited.has(key)) {\n          visited.add(key);\n          const neighbors = getNeighbors(pos, currentSnake);\n          for (const neighbor of neighbors) {\n            queue.push([...path, neighbor]);\n          }\n        }\n      }\n      return null;\n    } catch (err) {\n      console.error('Error in findPath:', err);\n      setError(err.message);\n      return null;\n    }\n  }, [getNeighbors]);\n  const moveSnake = useCallback(() => {\n    if (gameOver) return;\n    try {\n      setSnake(prevSnake => {\n        const head = prevSnake[0];\n        let nextMove;\n        const pathToFood = findPath(head, food, prevSnake);\n        if (pathToFood && pathToFood.length > 1) {\n          nextMove = pathToFood[1];\n        } else {\n          nextMove = {\n            x: head.x + direction.x,\n            y: head.y + direction.y\n          };\n          if (!getNeighbors(head, prevSnake).some(n => n.x === nextMove.x && n.y === nextMove.y)) {\n            const safeNeighbors = getNeighbors(head, prevSnake);\n            if (safeNeighbors.length > 0) {\n              nextMove = safeNeighbors[0];\n            } else {\n              setGameOver(true);\n              return prevSnake;\n            }\n          }\n        }\n        const newSnake = [nextMove, ...prevSnake];\n        if (nextMove.x === food.x && nextMove.y === food.y) {\n          setScore(prevScore => prevScore + 1);\n          setFood(getRandomFood(newSnake));\n        } else {\n          newSnake.pop();\n        }\n        if (nextMove.x < 0 || nextMove.x >= GRID_SIZE || nextMove.y < 0 || nextMove.y >= GRID_SIZE || prevSnake.some(segment => segment.x === nextMove.x && segment.y === nextMove.y)) {\n          setGameOver(true);\n          return prevSnake;\n        }\n        setDirection({\n          x: nextMove.x - head.x,\n          y: nextMove.y - head.y\n        });\n        return newSnake;\n      });\n    } catch (err) {\n      console.error('Error in moveSnake:', err);\n      setError(err.message);\n    }\n  }, [direction, food, gameOver, getNeighbors, findPath]);\n  useEffect(() => {\n    const gameLoop = setInterval(moveSnake, SPEED);\n    return () => clearInterval(gameLoop);\n  }, [moveSnake]);\n  const getRandomFood = useCallback(currentSnake => {\n    let newFood;\n    do {\n      newFood = {\n        x: Math.floor(Math.random() * GRID_SIZE),\n        y: Math.floor(Math.random() * GRID_SIZE)\n      };\n    } while (currentSnake.some(segment => segment.x === newFood.x && segment.y === newFood.y));\n    return newFood;\n  }, []);\n  const resetGame = () => {\n    setSnake(INITIAL_SNAKE);\n    setDirection(INITIAL_DIRECTION);\n    setFood(INITIAL_FOOD);\n    setGameOver(false);\n    setScore(0);\n    setError(null);\n  };\n  const renderGrid = () => {\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [Array.from({\n        length: GRID_SIZE\n      }).map((_, i) => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: i * CELL_SIZE,\n        y1: 0,\n        x2: i * CELL_SIZE,\n        y2: GAME_SIZE,\n        stroke: \"#34495E\",\n        strokeWidth: \"1\"\n      }, `v${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this)), Array.from({\n        length: GRID_SIZE\n      }).map((_, i) => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: 0,\n        y1: i * CELL_SIZE,\n        x2: GAME_SIZE,\n        y2: i * CELL_SIZE,\n        stroke: \"#34495E\",\n        strokeWidth: \"1\"\n      }, `h${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this);\n  };\n  const renderSnake = () => {\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: snake.map((segment, index) => /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: segment.x * CELL_SIZE,\n        y: segment.y * CELL_SIZE,\n        width: CELL_SIZE,\n        height: CELL_SIZE,\n        rx: 5,\n        ry: 5,\n        fill: index === 0 ? '#2ECC71' : '#27AE60',\n        children: /*#__PURE__*/_jsxDEV(\"animate\", {\n          attributeName: \"fill\",\n          values: index === 0 ? '#2ECC71;#27AE60;#2ECC71' : '#27AE60;#2ECC71;#27AE60',\n          dur: \"1s\",\n          repeatCount: \"indefinite\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this);\n  };\n  const renderFood = () => {\n    return /*#__PURE__*/_jsxDEV(\"circle\", {\n      cx: food.x * CELL_SIZE + CELL_SIZE / 2,\n      cy: food.y * CELL_SIZE + CELL_SIZE / 2,\n      r: CELL_SIZE / 3,\n      fill: \"#E74C3C\",\n      children: /*#__PURE__*/_jsxDEV(\"animate\", {\n        attributeName: \"r\",\n        values: `${CELL_SIZE / 3};${CELL_SIZE / 2.5};${CELL_SIZE / 3}`,\n        dur: \"1s\",\n        repeatCount: \"indefinite\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this);\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"An error occurred: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '100vh',\n      backgroundColor: '#2C3E50',\n      color: '#ECF0F1',\n      fontFamily: 'Arial, sans-serif',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        fontSize: '36px',\n        fontWeight: 'bold',\n        marginBottom: '20px',\n        color: '#E74C3C'\n      },\n      children: \"Ultimate AI Snake Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: GAME_SIZE,\n      height: GAME_SIZE,\n      style: {\n        border: '3px solid #34495E',\n        borderRadius: '10px',\n        boxShadow: '0 0 20px rgba(0, 0, 0, 0.3)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n        width: GAME_SIZE,\n        height: GAME_SIZE,\n        fill: \"#2C3E50\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), renderGrid(), renderSnake(), renderFood()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        fontSize: '24px',\n        fontWeight: 'bold'\n      },\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        fontSize: '16px',\n        color: '#BDC3C7',\n        textAlign: 'center'\n      },\n      children: [\"AI is controlling the snake\", gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: '28px',\n            fontWeight: 'bold',\n            color: '#E74C3C'\n          },\n          children: \"Game Over!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            marginTop: '10px',\n            padding: '12px 24px',\n            backgroundColor: '#3498DB',\n            color: 'white',\n            border: 'none',\n            borderRadius: '5px',\n            cursor: 'pointer',\n            fontSize: '18px',\n            transition: 'background-color 0.3s'\n          },\n          onClick: resetGame,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n_s(UltimateAISnakeGame, \"WHt5rvN60Q3iygfdHkAFr6nKUDs=\");\n_c = UltimateAISnakeGame;\nexport default UltimateAISnakeGame;\nvar _c;\n$RefreshReg$(_c, \"UltimateAISnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","jsxDEV","_jsxDEV","GRID_SIZE","CELL_SIZE","GAME_SIZE","INITIAL_SNAKE","x","y","INITIAL_DIRECTION","INITIAL_FOOD","SPEED","UltimateAISnakeGame","_s","snake","setSnake","direction","setDirection","food","setFood","gameOver","setGameOver","score","setScore","error","setError","svgRef","getNeighbors","node","currentSnake","neighbors","filter","n","some","s","err","console","message","findPath","start","goal","queue","visited","Set","length","path","shift","pos","key","has","add","neighbor","push","moveSnake","prevSnake","head","nextMove","pathToFood","safeNeighbors","newSnake","prevScore","getRandomFood","pop","segment","gameLoop","setInterval","clearInterval","newFood","Math","floor","random","resetGame","renderGrid","children","Array","from","map","_","i","x1","y1","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","renderSnake","index","width","height","rx","ry","fill","attributeName","values","dur","repeatCount","renderFood","cx","cy","r","style","display","flexDirection","alignItems","justifyContent","minHeight","backgroundColor","color","fontFamily","padding","fontSize","fontWeight","marginBottom","ref","border","borderRadius","boxShadow","marginTop","textAlign","cursor","transition","onClick","_c","$RefreshReg$"],"sources":["/Users/luke/Library/CloudStorage/Dropbox/code/fly-snake/src/AISnakeGame.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\n\nconst GRID_SIZE = 20;\nconst CELL_SIZE = 30;\nconst GAME_SIZE = GRID_SIZE * CELL_SIZE;\nconst INITIAL_SNAKE = [{ x: 10, y: 10 }, { x: 9, y: 10 }];\nconst INITIAL_DIRECTION = { x: 1, y: 0 };\nconst INITIAL_FOOD = { x: 15, y: 15 };\nconst SPEED = 100;\n\nconst UltimateAISnakeGame = () => {\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\n  const [direction, setDirection] = useState(INITIAL_DIRECTION);\n  const [food, setFood] = useState(INITIAL_FOOD);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [error, setError] = useState(null);\n  const svgRef = useRef(null);\n\n  const getNeighbors = useCallback((node, currentSnake) => {\n    try {\n      const neighbors = [\n        { x: node.x - 1, y: node.y },\n        { x: node.x + 1, y: node.y },\n        { x: node.x, y: node.y - 1 },\n        { x: node.x, y: node.y + 1 },\n      ];\n      return neighbors.filter(\n        (n) =>\n          n.x >= 0 &&\n          n.x < GRID_SIZE &&\n          n.y >= 0 &&\n          n.y < GRID_SIZE &&\n          !currentSnake.some((s) => s.x === n.x && s.y === n.y)\n      );\n    } catch (err) {\n      console.error('Error in getNeighbors:', err);\n      setError(err.message);\n      return [];\n    }\n  }, []);\n\n  const findPath = useCallback((start, goal, currentSnake) => {\n    try {\n      const queue = [[start]];\n      const visited = new Set();\n\n      while (queue.length > 0) {\n        const path = queue.shift();\n        const pos = path[path.length - 1];\n        const key = `${pos.x},${pos.y}`;\n\n        if (pos.x === goal.x && pos.y === goal.y) {\n          return path;\n        }\n\n        if (!visited.has(key)) {\n          visited.add(key);\n          const neighbors = getNeighbors(pos, currentSnake);\n          for (const neighbor of neighbors) {\n            queue.push([...path, neighbor]);\n          }\n        }\n      }\n\n      return null;\n    } catch (err) {\n      console.error('Error in findPath:', err);\n      setError(err.message);\n      return null;\n    }\n  }, [getNeighbors]);\n\n  const moveSnake = useCallback(() => {\n    if (gameOver) return;\n\n    try {\n      setSnake((prevSnake) => {\n        const head = prevSnake[0];\n        let nextMove;\n\n        const pathToFood = findPath(head, food, prevSnake);\n\n        if (pathToFood && pathToFood.length > 1) {\n          nextMove = pathToFood[1];\n        } else {\n          nextMove = { x: head.x + direction.x, y: head.y + direction.y };\n          \n          if (!getNeighbors(head, prevSnake).some(n => n.x === nextMove.x && n.y === nextMove.y)) {\n            const safeNeighbors = getNeighbors(head, prevSnake);\n            if (safeNeighbors.length > 0) {\n              nextMove = safeNeighbors[0];\n            } else {\n              setGameOver(true);\n              return prevSnake;\n            }\n          }\n        }\n\n        const newSnake = [nextMove, ...prevSnake];\n\n        if (nextMove.x === food.x && nextMove.y === food.y) {\n          setScore((prevScore) => prevScore + 1);\n          setFood(getRandomFood(newSnake));\n        } else {\n          newSnake.pop();\n        }\n\n        if (\n          nextMove.x < 0 || nextMove.x >= GRID_SIZE || nextMove.y < 0 || nextMove.y >= GRID_SIZE ||\n          prevSnake.some((segment) => segment.x === nextMove.x && segment.y === nextMove.y)\n        ) {\n          setGameOver(true);\n          return prevSnake;\n        }\n\n        setDirection({ x: nextMove.x - head.x, y: nextMove.y - head.y });\n        return newSnake;\n      });\n    } catch (err) {\n      console.error('Error in moveSnake:', err);\n      setError(err.message);\n    }\n  }, [direction, food, gameOver, getNeighbors, findPath]);\n\n  useEffect(() => {\n    const gameLoop = setInterval(moveSnake, SPEED);\n    return () => clearInterval(gameLoop);\n  }, [moveSnake]);\n\n  const getRandomFood = useCallback((currentSnake) => {\n    let newFood;\n    do {\n      newFood = {\n        x: Math.floor(Math.random() * GRID_SIZE),\n        y: Math.floor(Math.random() * GRID_SIZE),\n      };\n    } while (currentSnake.some((segment) => segment.x === newFood.x && segment.y === newFood.y));\n    return newFood;\n  }, []);\n\n  const resetGame = () => {\n    setSnake(INITIAL_SNAKE);\n    setDirection(INITIAL_DIRECTION);\n    setFood(INITIAL_FOOD);\n    setGameOver(false);\n    setScore(0);\n    setError(null);\n  };\n\n  const renderGrid = () => {\n    return (\n      <g>\n        {Array.from({ length: GRID_SIZE }).map((_, i) => (\n          <line\n            key={`v${i}`}\n            x1={i * CELL_SIZE}\n            y1={0}\n            x2={i * CELL_SIZE}\n            y2={GAME_SIZE}\n            stroke=\"#34495E\"\n            strokeWidth=\"1\"\n          />\n        ))}\n        {Array.from({ length: GRID_SIZE }).map((_, i) => (\n          <line\n            key={`h${i}`}\n            x1={0}\n            y1={i * CELL_SIZE}\n            x2={GAME_SIZE}\n            y2={i * CELL_SIZE}\n            stroke=\"#34495E\"\n            strokeWidth=\"1\"\n          />\n        ))}\n      </g>\n    );\n  };\n\n  const renderSnake = () => {\n    return (\n      <g>\n        {snake.map((segment, index) => (\n          <rect\n            key={index}\n            x={segment.x * CELL_SIZE}\n            y={segment.y * CELL_SIZE}\n            width={CELL_SIZE}\n            height={CELL_SIZE}\n            rx={5}\n            ry={5}\n            fill={index === 0 ? '#2ECC71' : '#27AE60'}\n          >\n            <animate\n              attributeName=\"fill\"\n              values={index === 0 ? '#2ECC71;#27AE60;#2ECC71' : '#27AE60;#2ECC71;#27AE60'}\n              dur=\"1s\"\n              repeatCount=\"indefinite\"\n            />\n          </rect>\n        ))}\n      </g>\n    );\n  };\n\n  const renderFood = () => {\n    return (\n      <circle\n        cx={(food.x * CELL_SIZE) + (CELL_SIZE / 2)}\n        cy={(food.y * CELL_SIZE) + (CELL_SIZE / 2)}\n        r={CELL_SIZE / 3}\n        fill=\"#E74C3C\"\n      >\n        <animate\n          attributeName=\"r\"\n          values={`${CELL_SIZE / 3};${CELL_SIZE / 2.5};${CELL_SIZE / 3}`}\n          dur=\"1s\"\n          repeatCount=\"indefinite\"\n        />\n      </circle>\n    );\n  };\n\n  if (error) {\n    return <div>An error occurred: {error}</div>;\n  }\n\n  return (\n    <div style={{\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '100vh',\n      backgroundColor: '#2C3E50',\n      color: '#ECF0F1',\n      fontFamily: 'Arial, sans-serif',\n      padding: '20px'\n    }}>\n      <h1 style={{ \n        fontSize: '36px', \n        fontWeight: 'bold', \n        marginBottom: '20px',\n        color: '#E74C3C'\n      }}>Ultimate AI Snake Game</h1>\n      <svg\n        ref={svgRef}\n        width={GAME_SIZE}\n        height={GAME_SIZE}\n        style={{\n          border: '3px solid #34495E',\n          borderRadius: '10px',\n          boxShadow: '0 0 20px rgba(0, 0, 0, 0.3)',\n        }}\n      >\n        <rect width={GAME_SIZE} height={GAME_SIZE} fill=\"#2C3E50\" />\n        {renderGrid()}\n        {renderSnake()}\n        {renderFood()}\n      </svg>\n      <div style={{ \n        marginTop: '20px', \n        fontSize: '24px',\n        fontWeight: 'bold'\n      }}>Score: {score}</div>\n      <div style={{ \n        marginTop: '20px', \n        fontSize: '16px', \n        color: '#BDC3C7',\n        textAlign: 'center'\n      }}>\n        AI is controlling the snake\n        {gameOver && (\n          <div style={{ marginTop: '10px' }}>\n            <p style={{ fontSize: '28px', fontWeight: 'bold', color: '#E74C3C' }}>Game Over!</p>\n            <button\n              style={{\n                marginTop: '10px',\n                padding: '12px 24px',\n                backgroundColor: '#3498DB',\n                color: 'white',\n                border: 'none',\n                borderRadius: '5px',\n                cursor: 'pointer',\n                fontSize: '18px',\n                transition: 'background-color 0.3s'\n              }}\n              onClick={resetGame}\n            >\n              Play Again\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default UltimateAISnakeGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}